pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        IMAGE_NAME = 'your-dockerhub-username/stock-prediction-api'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Setup API Directory') {
            steps {
                // Create API directory if it doesn't exist
                sh "mkdir -p api"
                
                // Copy the app.py file to the api directory
                sh "cp -f ${WORKSPACE}/app.py ${WORKSPACE}/api/ || true"
                
                // Copy requirements.txt to api directory
                sh "cp -f ${WORKSPACE}/requirements.txt ${WORKSPACE}/api/ || true"
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t ${env.IMAGE_NAME}:${env.IMAGE_TAG} ."
                    sh "docker tag ${env.IMAGE_NAME}:${env.IMAGE_TAG} ${env.IMAGE_NAME}:latest"
                }
            }
        }
        
        stage('Test Docker Image') {
            steps {
                script {
                    // Run a simple test to check if the container starts
                    sh "docker run --name test-container -d -p 8000:8000 ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                    
                    // Wait for container to start
                    sh "sleep 5"
                    
                    // Test the health endpoint
                    sh "curl -f http://localhost:8000/health || exit 1"
                    
                    // Stop and remove test container
                    sh "docker stop test-container && docker rm test-container"
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                sh "echo ${DOCKER_HUB_CREDS_PSW} | docker login -u ${DOCKER_HUB_CREDS_USR} --password-stdin"
                sh "docker push ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                sh "docker push ${env.IMAGE_NAME}:latest"
            }
        }
    }
    
    post {
        always {
            sh "docker logout"
            sh "docker rmi ${env.IMAGE_NAME}:${env.IMAGE_TAG} ${env.IMAGE_NAME}:latest || true"
            
            // Clean up any test containers that might be left
            sh "docker rm -f test-container || true"
            
            // Archive artifacts
            archiveArtifacts artifacts: 'api/**', allowEmptyArchive: true
        }
    }
}